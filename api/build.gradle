import java.time.Instant

plugins {
    id 'application'
    id 'jacoco'
    id 'net.researchgate.release' version "$releasePluginVersion"
}

group = 'com.ruchij.api'

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            project(':crawler'),
            project(':migration-app'),
            "com.typesafe:config:$typesafeConfigVersion",
            "io.javalin:javalin-bundle:$javalinVersion",
            "org.mindrot:jbcrypt:$jbcryptVersion",
            "io.reactivex.rxjava3:rxjava:$rxJavaVersion",
            "co.elastic.clients:elasticsearch-java:$elasticsearchJavaVersion",
            "org.jdbi:jdbi3-core:$jdbiVersion",
            "org.postgresql:postgresql:$postgresqlVersion",
            "com.h2database:h2:$h2Version",
            "io.lettuce:lettuce-core:$lettuceVersion",
            "ch.qos.logback:logback-classic:$logbackVersion",
            "com.squareup.okhttp3:okhttp:$okHttpVersion"
    )

    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.mockito:mockito-core:$mockitoVersion"
    )
}

application {
    mainClass = 'com.ruchij.api.ApiApp'
}

jacocoTestReport {
    dependsOn test
}

task buildInformation {
    doLast {
        def file = new File("$buildDir/resources/main/build-information.json")
        file.parentFile.mkdirs()

        if (file.exists()) {
            file.delete()
        }

        def buildInfo =
                """{
                "name": "job-market-analyzer-api",
                "group": "${project.group}",
                "version": "${project.version}",
                "gradleVersion": "${gradle.gradleVersion}",
                "buildTimestamp": "${Instant.now()}",
                "gitBranch": "${'git rev-parse --abbrev-ref HEAD'.execute().text.trim()}",
                "gitCommit": "${'git rev-parse --short HEAD'.execute().text.trim()}"
            }"""

        file.withWriter('UTF-8') { writer ->
            writer.write(buildInfo)
        }
    }
}

compileJava {
    dependsOn buildInformation
}

tasks.named('test') {
    useJUnitPlatform()
}

distTar {
    archiveFileName = 'api.tar'
}

release {
    preTagCommitMessage = 'Setting release version: '
    newVersionCommitMessage = 'Setting development version: '
    pushReleaseVersionBranch = 'main'

    git {
        requireBranch.set('dev')
    }
}
